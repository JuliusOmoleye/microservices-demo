apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "backend.fullname" . }}
  labels:
    {{- include "backend.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "backend.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "backend.selectorLabels" . | nindent 8 }}
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      initContainers:
      - name: wait-for-db
        image: busybox:1.36
        command: ['sh', '-c']
        args:
        - |
          until nc -z {{ .Values.database.serviceName }} {{ .Values.database.servicePort }}; do
            echo "Waiting for database..."
            sleep 2
          done
          echo "Database is ready!"
      containers:
      - name: backend
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ['node', '-e']
        args:
        - |
          const http = require('http');
          const server = http.createServer((req, res) => {
            res.writeHead(200, {'Content-Type': 'application/json'});
            if (req.url === '/health') {
              res.end(JSON.stringify({
                status: 'healthy', 
                service: 'backend-microservice', 
                timestamp: new Date().toISOString(),
                version: process.env.APP_VERSION
              }));
            } else {
              res.end(JSON.stringify({
                message: 'Hello from Backend Microservice!', 
                version: process.env.APP_VERSION,
                environment: process.env.NODE_ENV,
                pod: process.env.HOSTNAME,
                database: process.env.DB_HOST,
                redis: process.env.REDIS_HOST
              }));
            }
          });
          server.listen(3000, () => console.log('Backend microservice running on port 3000'));
        ports:
        - name: http
          containerPort: {{ .Values.service.targetPort }}
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        env:
        - name: APP_VERSION
          value: {{ .Values.app.version }}
        - name: NODE_ENV
          value: {{ .Values.app.environment }}
        - name: DB_HOST
          value: {{ .Values.database.serviceName }}
        - name: DB_PORT
          value: "{{ .Values.database.servicePort }}"
        - name: REDIS_HOST
          value: {{ .Values.redis.serviceName }}
        - name: REDIS_PORT
          value: "{{ .Values.redis.servicePort }}"
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}